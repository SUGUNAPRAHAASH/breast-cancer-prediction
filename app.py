import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.datasets import load_breast_cancer
import plotly.express as px
import plotly.graph_objects as go
from streamlit_option_menu import option_menu
import json
from datetime import datetime

# ЁЯЫС MUST BE FIRST Streamlit command!!
st.set_page_config(
    page_title="Breast Cancer Prediction",
    page_icon="ЁЯОЧя╕П",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Language translations
translations = {
    "en": {
        "title": "Breast Cancer Prediction System",
        "welcome": "Welcome to the Breast Cancer Prediction System",
        "welcome_desc": "This AI-powered system helps in early detection of breast cancer using machine learning.",
        "features": "Key Features",
        "ai_powered": "AI-Powered",
        "ai_desc": "Advanced machine learning algorithms for accurate predictions",
        "realtime": "Real-time Analysis",
        "realtime_desc": "Instant results with detailed probability scores",
        "user_friendly": "User-Friendly",
        "user_desc": "Intuitive interface for easy data input and results interpretation",
        "make_prediction": "Make a Prediction",
        "enter_data": "Enter Patient Data",
        "predict": "Predict",
        "results": "Prediction Results",
        "diagnosis": "Diagnosis",
        "benign": "Benign",
        "malignant": "Malignant",
        "benign_prob": "Benign Probability",
        "malignant_prob": "Malignant Probability",
        "model_info": "Model Information",
        "model_arch": "Model Architecture",
        "model_desc": "This model uses a Random Forest Classifier optimized through GridSearchCV for maximum accuracy.",
        "feature_importance": "Feature Importance",
        "about": "About",
        "about_title": "About This Project",
        "about_desc": "This Breast Cancer Prediction System is designed to assist healthcare professionals in early detection of breast cancer using machine learning algorithms.",
        "tech_stack": "Technology Stack",
        "disclaimer": "Disclaimer",
        "disclaimer_text": "This application is for educational purposes only and should not be used as a substitute for professional medical advice, diagnosis, or treatment.",
        "footer": "┬й 2024 Breast Cancer Prediction System | Version 1.0",
        "nav_home": "Home",
        "nav_prediction": "Prediction",
        "nav_model": "Model Info",
        "nav_about": "About"
    },
    "es": {
        "title": "Sistema de Predicci├│n de C├бncer de Mama",
        "welcome": "Bienvenido al Sistema de Predicci├│n de C├бncer de Mama",
        "welcome_desc": "Este sistema impulsado por IA ayuda en la detecci├│n temprana del c├бncer de mama mediante aprendizaje autom├бtico.",
        "features": "Caracter├нsticas Principales",
        "ai_powered": "Impulsado por IA",
        "ai_desc": "Algoritmos avanzados de aprendizaje autom├бtico para predicciones precisas",
        "realtime": "An├бlisis en Tiempo Real",
        "realtime_desc": "Resultados instant├бneos con puntuaciones de probabilidad detalladas",
        "user_friendly": "F├бcil de Usar",
        "user_desc": "Interfaz intuitiva para f├бcil entrada de datos e interpretaci├│n de resultados",
        "make_prediction": "Realizar Predicci├│n",
        "enter_data": "Ingrese Datos del Paciente",
        "predict": "Predecir",
        "results": "Resultados de la Predicci├│n",
        "diagnosis": "Diagn├│stico",
        "benign": "Benigno",
        "malignant": "Maligno",
        "benign_prob": "Probabilidad de Benigno",
        "malignant_prob": "Probabilidad de Maligno",
        "model_info": "Informaci├│n del Modelo",
        "model_arch": "Arquitectura del Modelo",
        "model_desc": "Este modelo utiliza un Clasificador de Bosque Aleatorio optimizado mediante GridSearchCV para m├бxima precisi├│n.",
        "feature_importance": "Importancia de Caracter├нsticas",
        "about": "Acerca de",
        "about_title": "Acerca de Este Proyecto",
        "about_desc": "Este Sistema de Predicci├│n de C├бncer de Mama est├б dise├▒ado para asistir a profesionales de la salud en la detecci├│n temprana del c├бncer de mama mediante algoritmos de aprendizaje autom├бtico.",
        "tech_stack": "Tecnolog├нas Utilizadas",
        "disclaimer": "Descargo de Responsabilidad",
        "disclaimer_text": "Esta aplicaci├│n es solo para fines educativos y no debe utilizarse como sustituto del consejo, diagn├│stico o tratamiento m├йdico profesional.",
        "footer": "┬й 2024 Sistema de Predicci├│n de C├бncer de Mama | Versi├│n 1.0",
        "nav_home": "Inicio",
        "nav_prediction": "Predicci├│n",
        "nav_model": "Info del Modelo",
        "nav_about": "Acerca de"
    },
    "ta": {
        "title": "рооро╛ро░рпНрокроХ рокрпБро▒рпНро▒рпБроирпЛропрпН роХрогро┐рокрпНрокрпБ роЕроорпИрокрпНрокрпБ",
        "welcome": "рооро╛ро░рпНрокроХ рокрпБро▒рпНро▒рпБроирпЛропрпН роХрогро┐рокрпНрокрпБ роЕроорпИрокрпНрокрпБроХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
        "welcome_desc": "роЗроирпНрод AI-роЗропроХрпНроХрокрпНрокроЯрпНроЯ роЕроорпИрокрпНрокрпБ роЗропроирпНродро┐ро░ роХро▒рпНро▒ро▓рпН роорпВро▓роорпН рооро╛ро░рпНрокроХ рокрпБро▒рпНро▒рпБроирпЛропро┐ройрпН роЖро░роорпНрок роХрогрпНроЯро▒ро┐родро▓рпБроХрпНроХрпБ роЙродро╡рпБроХро┐ро▒родрпБ.",
        "features": "роорпБроХрпНроХро┐роп роЕроорпНроЪроЩрпНроХро│рпН",
        "ai_powered": "AI-роЗропроХрпНроХрокрпНрокроЯрпНроЯ",
        "ai_desc": "родрпБро▓рпНро▓ро┐ропрооро╛рой роХрогро┐рокрпНрокрпБроХро│рпБроХрпНроХро╛рой роорпЗроорпНрокроЯрпНроЯ роЗропроирпНродро┐ро░ роХро▒рпНро▒ро▓рпН ро╡ро┤ро┐роорпБро▒рпИроХро│рпН",
        "realtime": "роиро┐роХро┤рпНроирпЗро░ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
        "realtime_desc": "ро╡ро┐ро░ро┐ро╡ро╛рой роиро┐роХро┤рпНродроХро╡рпБ роородро┐рокрпНрокрпЖрогрпНроХро│рпБроЯройрпН роЙроЯройроЯро┐ роорпБроЯро┐ро╡рпБроХро│рпН",
        "user_friendly": "рокропройро░рпН роироЯрпНрокрпБ",
        "user_desc": "родро░ро╡рпБ роЙро│рпНро│рпАроЯрпБ рооро▒рпНро▒рпБроорпН роорпБроЯро┐ро╡рпБроХро│рпИ ро╡ро┐ро│роХрпНроХрпБро╡родро▒рпНроХро╛рой роЙро│рпНро│рпБрогро░рпНро╡рпБ роЗроЯрпИроорпБроХроорпН",
        "make_prediction": "роХрогро┐рокрпНрокрпБ роЪрпЖропрпНропро╡рпБроорпН",
        "enter_data": "роирпЛропро╛ро│ро┐ родро░ро╡рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
        "predict": "роХрогро┐роХрпНроХро╡рпБроорпН",
        "results": "роХрогро┐рокрпНрокрпБ роорпБроЯро┐ро╡рпБроХро│рпН",
        "diagnosis": "роирпЛропро▒ро┐родро▓рпН",
        "benign": "роиро▓рпНро▓ро┐ропро▓рпНрокрпБ",
        "malignant": "родрпАропро┐ропро▓рпНрокрпБ",
        "benign_prob": "роиро▓рпНро▓ро┐ропро▓рпНрокрпБ роиро┐роХро┤рпНродроХро╡рпБ",
        "malignant_prob": "родрпАропро┐ропро▓рпНрокрпБ роиро┐роХро┤рпНродроХро╡рпБ",
        "model_info": "рооро╛родро┐ро░ро┐ родроХро╡ро▓рпН",
        "model_arch": "рооро╛родро┐ро░ро┐ роХроЯрпНроЯроорпИрокрпНрокрпБ",
        "model_desc": "роЗроирпНрод рооро╛родро┐ро░ро┐ роЕродро┐роХрокроЯрпНроЪ родрпБро▓рпНро▓ро┐ропродрпНродро┐ро▒рпНроХро╛роХ GridSearchCV роорпВро▓роорпН роорпЗроорпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯ ро░рпЗрогрпНроЯроорпН роГрокро╛ро░ро╕рпНроЯрпН роХро┐ро│ро╛роЪро┐роГрокрпИропро░рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ.",
        "feature_importance": "роЕроорпНроЪ роорпБроХрпНроХро┐ропродрпНродрпБро╡роорпН",
        "about": "рокро▒рпНро▒ро┐",
        "about_title": "роЗроирпНрод родро┐роЯрпНроЯроорпН рокро▒рпНро▒ро┐",
        "about_desc": "роЗроирпНрод рооро╛ро░рпНрокроХ рокрпБро▒рпНро▒рпБроирпЛропрпН роХрогро┐рокрпНрокрпБ роЕроорпИрокрпНрокрпБ роЗропроирпНродро┐ро░ роХро▒рпНро▒ро▓рпН ро╡ро┤ро┐роорпБро▒рпИроХро│рпН роорпВро▓роорпН рооро╛ро░рпНрокроХ рокрпБро▒рпНро▒рпБроирпЛропро┐ройрпН роЖро░роорпНрок роХрогрпНроЯро▒ро┐родро▓рпБроХрпНроХрпБ роЙродро╡рпБроорпН ро╡роХрпИропро┐ро▓рпН ро╡роЯро┐ро╡роорпИроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ.",
        "tech_stack": "родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок роЕроЯрпБроХрпНроХрпБ",
        "disclaimer": "рооро▒рпБрокрпНрокрпБ",
        "disclaimer_text": "роЗроирпНрод рокропройрпНрокро╛роЯрпБ роХро▓рпНро╡ро┐ роирпЛроХрпНроХроЩрпНроХро│рпБроХрпНроХро╛роХ роороЯрпНроЯрпБроорпЗ рооро▒рпНро▒рпБроорпН родрпКро┤ро┐ро▓рпНроорпБро▒рпИ рооро░рпБродрпНродрпБро╡ роЖро▓рпЛроЪройрпИ, роирпЛропро▒ро┐родро▓рпН роЕро▓рпНро▓родрпБ роЪро┐роХро┐роЪрпНроЪрпИроХрпНроХрпБ рооро╛ро▒рпНро▒ро╛роХ рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯроХрпНроХрпВроЯро╛родрпБ.",
        "footer": "┬й 2024 рооро╛ро░рпНрокроХ рокрпБро▒рпНро▒рпБроирпЛропрпН роХрогро┐рокрпНрокрпБ роЕроорпИрокрпНрокрпБ | рокродро┐рокрпНрокрпБ 1.0",
        "nav_home": "роорпБроХрокрпНрокрпБ",
        "nav_prediction": "роХрогро┐рокрпНрокрпБ",
        "nav_model": "рооро╛родро┐ро░ро┐ родроХро╡ро▓рпН",
        "nav_about": "рокро▒рпНро▒ро┐"
    }
}

# Custom CSS for styling
st.markdown("""
<style>
    :root {
        --primary-color: #4CAF50;
        --secondary-color: #2196F3;
        --danger-color: #f44336;
        --warning-color: #FFC107;
        --success-color: #4CAF50;
        --text-color: #333333;
        --background-color: #f8f9fa;
    }
    
    .main {
        background-color: var(--background-color);
        color: var(--text-color);
    }
    
    .stButton>button {
        background-color: var(--primary-color);
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        font-weight: bold;
        transition: all 0.3s ease;
    }
    
    .stButton>button:hover {
        background-color: #45a049;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .feature-card {
        background-color: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }
    
    .feature-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .prediction-card {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        text-align: center;
        transition: all 0.3s ease;
    }
    
    .prediction-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }
    
    .metric-card {
        background-color: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
        transition: all 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .language-selector {
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 1000;
    }
    
    .footer {
        text-align: center;
        padding: 1rem;
        background-color: white;
        border-radius: 10px;
        margin-top: 2rem;
        box-shadow: 0 -2px 4px rgba(0,0,0,0.1);
    }
    
    @media (max-width: 768px) {
        .feature-card, .prediction-card, .metric-card {
            margin-bottom: 1rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Language selection
language = st.sidebar.selectbox("ЁЯМР Language / Idioma / роорпКро┤ро┐", ["en", "es", "ta"])
t = translations[language]

# Load data and model
data = load_breast_cancer()
feature_names = data.feature_names

try:
    model = joblib.load('breast_cancer_model.joblib')
    scaler = joblib.load('scaler.joblib')
except:
    st.error("Please run model.py first to train and save the model.")
    st.stop()

# Sidebar navigation with icons
with st.sidebar:
    st.image("https://raw.githubusercontent.com/streamlit/streamlit/develop/docs/logo.svg", width=200)
    selected = option_menu(
        menu_title="Navigation",
        options=[t["nav_home"], t["nav_prediction"], t["nav_model"], t["nav_about"]],
        icons=["house", "activity", "info-circle", "question-circle"],
        default_index=0,
    )

# Home Page
if selected == t["nav_home"]:
    st.title(f"ЁЯОЧя╕П {t['title']}")
    st.markdown(f"""
    <div style='text-align: center; margin-bottom: 2rem;'>
        <h2>{t['welcome']}</h2>
        <p>{t['welcome_desc']}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Features section
    st.header(t["features"])
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div class='feature-card'>
            <h3>ЁЯдЦ {t['ai_powered']}</h3>
            <p>{t['ai_desc']}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class='feature-card'>
            <h3>ЁЯУК {t['realtime']}</h3>
            <p>{t['realtime_desc']}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class='feature-card'>
            <h3>ЁЯУ▒ {t['user_friendly']}</h3>
            <p>{t['user_desc']}</p>
        </div>
        """, unsafe_allow_html=True)

# Prediction Page
elif selected == t["nav_prediction"]:
    st.title(f"ЁЯОЧя╕П {t['make_prediction']}")
    
    # Create input form with modern design
    st.markdown(f"""
    <div style='background-color: white; padding: 2rem; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'>
        <h2 style='text-align: center; margin-bottom: 2rem;'>{t['enter_data']}</h2>
    </div>
    """, unsafe_allow_html=True)
    
    # Create two columns for input fields
    col1, col2 = st.columns(2)
    
    # Create input fields for each feature
    input_data = {}
    for i, feature in enumerate(feature_names):
        col = col1 if i < len(feature_names) // 2 else col2
        with col:
            input_data[feature] = st.number_input(
                f"{feature}",
                min_value=0.0,
                max_value=1000.0,
                value=float(np.mean(data.data[:, i])),
                step=0.1,
                help=f"Enter the {feature} value"
            )
    
    # Prediction button with modern design
    if st.button(t["predict"], key="predict_button"):
        # Prepare input data
        input_df = pd.DataFrame([input_data])
        
        # Scale the input data
        input_scaled = scaler.transform(input_df)
        
        # Make prediction
        prediction = model.predict(input_scaled)[0]
        probability = model.predict_proba(input_scaled)[0]
        
        # Display results with modern design
        st.markdown(f"""
        <div style='margin-top: 2rem;'>
            <h2 style='text-align: center;'>{t['results']}</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Create three columns for results
        result_col1, result_col2, result_col3 = st.columns(3)
        
        with result_col1:
            st.markdown(f"""
            <div class='prediction-card'>
                <h3>{t['diagnosis']}</h3>
                <h2 style='color: {'#4CAF50' if prediction == 1 else '#f44336'};'>
                    {t['benign'] if prediction == 1 else t['malignant']}
                </h2>
            </div>
            """, unsafe_allow_html=True)
        
        with result_col2:
            st.markdown(f"""
            <div class='metric-card'>
                <h3>{t['benign_prob']}</h3>
                <h2 style='color: #4CAF50;'>{probability[1]:.2%}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with result_col3:
            st.markdown(f"""
            <div class='metric-card'>
                <h3>{t['malignant_prob']}</h3>
                <h2 style='color: #f44336;'>{probability[0]:.2%}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        # Create probability visualization
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=probability[1] * 100,
            title={'text': t["benign_prob"]},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "#4CAF50"},
                'steps': [
                    {'range': [0, 50], 'color': "#f44336"},
                    {'range': [50, 100], 'color': "#4CAF50"}
                ],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': 50
                }
            }
        ))
        
        fig.update_layout(
            height=300,
            margin=dict(l=20, r=20, t=30, b=20),
            paper_bgcolor='rgba(0,0,0,0)',
            font={'color': "darkblue"}
        )
        
        st.plotly_chart(fig, use_container_width=True)

# Model Info Page
elif selected == t["nav_model"]:
    st.title(f"ЁЯОЧя╕П {t['model_info']}")
    
    # Model details
    st.markdown(f"""
    <div style='background-color: white; padding: 2rem; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'>
        <h2>{t['model_arch']}</h2>
        <p>{t['model_desc']}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Feature importance visualization
    st.header(t["feature_importance"])
    try:
        feature_importance = pd.DataFrame({
            'Feature': feature_names,
            'Importance': model.feature_importances_
        }).sort_values('Importance', ascending=True)
        
        fig = px.bar(
            feature_importance,
            x='Importance',
            y='Feature',
            orientation='h',
            title=t["feature_importance"],
            color='Importance',
            color_continuous_scale='Viridis'
        )
        
        fig.update_layout(
            height=600,
            margin=dict(l=20, r=20, t=30, b=20),
            plot_bgcolor='white',
            paper_bgcolor='white',
            font={'color': "darkblue"}
        )
        
        st.plotly_chart(fig, use_container_width=True)
    except:
        st.info("Feature importance visualization is not available for the current model.")

# About Page
else:
    st.title(f"ЁЯОЧя╕П {t['about']}")
    
    st.markdown(f"""
    <div style='background-color: white; padding: 2rem; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'>
        <h2>{t['about_title']}</h2>
        <p>{t['about_desc']}</p>
        
        <h3>{t['tech_stack']}</h3>
        <ul>
            <li>Python</li>
            <li>Scikit-learn</li>
            <li>Streamlit</li>
            <li>Plotly</li>
        </ul>
        
        <h3>{t['disclaimer']}</h3>
        <p style='color: #f44336;'>{t['disclaimer_text']}</p>
    </div>
    """, unsafe_allow_html=True)

# Footer with current year
current_year = datetime.now().year
st.markdown("---")
st.markdown(f"""
<div class='footer'>
    <p>┬й {current_year} {t['title']} | Version 1.0</p>
</div>
""", unsafe_allow_html=True)
